{"ast":null,"code":"import { Router } from 'express';\nimport User from '../models/user.model';\nimport aadharData from '../data/aadhar.json';\nconst router = Router();\n\n// Calculate subsidy based on income\nfunction calculateSubsidy(income) {\n  if (income === 0) return 50;\n  if (income <= 25000) return 40;\n  if (income <= 50000) return 30;\n  if (income <= 75000) return 20;\n  if (income <= 100000) return 10;\n  return 0;\n}\n\n// Apply for LPG Connection\nrouter.post('/apply', async (req, res) => {\n  try {\n    const {\n      name,\n      aadhar,\n      address,\n      income,\n      email,\n      phone\n    } = req.body;\n\n    // Validate Aadhar\n    const aadharExists = aadharData.find(item => item.aadhar === aadhar);\n    if (!aadharExists) {\n      return res.status(400).json({\n        message: 'Invalid Aadhar number'\n      });\n    }\n    const user = new User({\n      name,\n      aadhar,\n      address,\n      income,\n      email,\n      phone,\n      status: 'Pending'\n    });\n    await user.save();\n    res.json({\n      message: 'Application submitted successfully!'\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error submitting application'\n    });\n  }\n});\n\n// Check Status by Aadhar\nrouter.get('/status/:aadhar', async (req, res) => {\n  try {\n    const user = await User.findOne({\n      aadhar: req.params.aadhar\n    });\n    if (!user) return res.status(404).json({\n      message: 'Application not found'\n    });\n    res.json(user);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching status'\n    });\n  }\n});\n\n// Admin: Get all applications\nrouter.get('/applications', async (req, res) => {\n  try {\n    const users = await User.find();\n    res.json(users);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching applications'\n    });\n  }\n});\n\n// Admin: Approve application\nrouter.put('/applications/:id/approve', async (req, res) => {\n  try {\n    const user = await User.findById(req.params.id);\n    if (!user) return res.status(404).json({\n      message: 'User not found'\n    });\n    user.status = 'Approved';\n    user.expectedDate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString(); // 7 days later\n    user.officer = 'Officer Sharma'; // Static for now\n    user.subsidy = calculateSubsidy(user.income);\n    await user.save();\n    res.json({\n      message: 'Application approved successfully!'\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error approving application'\n    });\n  }\n});\n\n// Admin: Reject application\nrouter.put('/applications/:id/reject', async (req, res) => {\n  try {\n    const {\n      reason\n    } = req.body;\n    const user = await User.findById(req.params.id);\n    if (!user) return res.status(404).json({\n      message: 'User not found'\n    });\n    user.status = 'Rejected';\n    user.reason = reason || 'Does not meet eligibility criteria';\n    await user.save();\n    res.json({\n      message: 'Application rejected successfully!'\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error rejecting application'\n    });\n  }\n});\nexport default router;","map":{"version":3,"names":["Router","User","aadharData","router","calculateSubsidy","income","post","req","res","name","aadhar","address","email","phone","body","aadharExists","find","item","status","json","message","user","save","error","get","findOne","params","users","put","findById","id","expectedDate","Date","now","toLocaleDateString","officer","subsidy","reason"],"sources":["D:/PMUY project/pmuy-fullstack/frontend/src/components/CheckStatus.js"],"sourcesContent":["import { Router } from 'express';\r\nimport User from '../models/user.model';\r\nimport aadharData from '../data/aadhar.json';\r\n\r\nconst router = Router();\r\n\r\n// Calculate subsidy based on income\r\nfunction calculateSubsidy(income: number): number {\r\n  if (income === 0) return 50;\r\n  if (income <= 25000) return 40;\r\n  if (income <= 50000) return 30;\r\n  if (income <= 75000) return 20;\r\n  if (income <= 100000) return 10;\r\n  return 0;\r\n}\r\n\r\n// Apply for LPG Connection\r\nrouter.post('/apply', async (req, res) => {\r\n  try {\r\n    const { name, aadhar, address, income, email, phone } = req.body;\r\n\r\n    // Validate Aadhar\r\n    const aadharExists = aadharData.find((item) => item.aadhar === aadhar);\r\n    if (!aadharExists) {\r\n      return res.status(400).json({ message: 'Invalid Aadhar number' });\r\n    }\r\n\r\n    const user = new User({\r\n      name,\r\n      aadhar,\r\n      address,\r\n      income,\r\n      email,\r\n      phone,\r\n      status: 'Pending',\r\n    });\r\n\r\n    await user.save();\r\n    res.json({ message: 'Application submitted successfully!' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error submitting application' });\r\n  }\r\n});\r\n\r\n// Check Status by Aadhar\r\nrouter.get('/status/:aadhar', async (req, res) => {\r\n  try {\r\n    const user = await User.findOne({ aadhar: req.params.aadhar });\r\n    if (!user) return res.status(404).json({ message: 'Application not found' });\r\n    res.json(user);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching status' });\r\n  }\r\n});\r\n\r\n// Admin: Get all applications\r\nrouter.get('/applications', async (req, res) => {\r\n  try {\r\n    const users = await User.find();\r\n    res.json(users);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching applications' });\r\n  }\r\n});\r\n\r\n// Admin: Approve application\r\nrouter.put('/applications/:id/approve', async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.params.id);\r\n    if (!user) return res.status(404).json({ message: 'User not found' });\r\n\r\n    user.status = 'Approved';\r\n    user.expectedDate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString(); // 7 days later\r\n    user.officer = 'Officer Sharma'; // Static for now\r\n    user.subsidy = calculateSubsidy(user.income);\r\n\r\n    await user.save();\r\n    res.json({ message: 'Application approved successfully!' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error approving application' });\r\n  }\r\n});\r\n\r\n// Admin: Reject application\r\nrouter.put('/applications/:id/reject', async (req, res) => {\r\n  try {\r\n    const { reason } = req.body;\r\n    const user = await User.findById(req.params.id);\r\n    if (!user) return res.status(404).json({ message: 'User not found' });\r\n\r\n    user.status = 'Rejected';\r\n    user.reason = reason || 'Does not meet eligibility criteria';\r\n\r\n    await user.save();\r\n    res.json({ message: 'Application rejected successfully!' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error rejecting application' });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,UAAU,MAAM,qBAAqB;AAE5C,MAAMC,MAAM,GAAGH,MAAM,CAAC,CAAC;;AAEvB;AACA,SAASI,gBAAgBA,CAACC,MAAc,EAAU;EAChD,IAAIA,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;EAC3B,IAAIA,MAAM,IAAI,KAAK,EAAE,OAAO,EAAE;EAC9B,IAAIA,MAAM,IAAI,KAAK,EAAE,OAAO,EAAE;EAC9B,IAAIA,MAAM,IAAI,KAAK,EAAE,OAAO,EAAE;EAC9B,IAAIA,MAAM,IAAI,MAAM,EAAE,OAAO,EAAE;EAC/B,OAAO,CAAC;AACV;;AAEA;AACAF,MAAM,CAACG,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC,MAAM;MAAEC,OAAO;MAAEN,MAAM;MAAEO,KAAK;MAAEC;IAAM,CAAC,GAAGN,GAAG,CAACO,IAAI;;IAEhE;IACA,MAAMC,YAAY,GAAGb,UAAU,CAACc,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACP,MAAM,KAAKA,MAAM,CAAC;IACtE,IAAI,CAACK,YAAY,EAAE;MACjB,OAAOP,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAwB,CAAC,CAAC;IACnE;IAEA,MAAMC,IAAI,GAAG,IAAIpB,IAAI,CAAC;MACpBQ,IAAI;MACJC,MAAM;MACNC,OAAO;MACPN,MAAM;MACNO,KAAK;MACLC,KAAK;MACLK,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMG,IAAI,CAACC,IAAI,CAAC,CAAC;IACjBd,GAAG,CAACW,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAsC,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdf,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA+B,CAAC,CAAC;EACnE;AACF,CAAC,CAAC;;AAEF;AACAjB,MAAM,CAACqB,GAAG,CAAC,iBAAiB,EAAE,OAAOjB,GAAG,EAAEC,GAAG,KAAK;EAChD,IAAI;IACF,MAAMa,IAAI,GAAG,MAAMpB,IAAI,CAACwB,OAAO,CAAC;MAAEf,MAAM,EAAEH,GAAG,CAACmB,MAAM,CAAChB;IAAO,CAAC,CAAC;IAC9D,IAAI,CAACW,IAAI,EAAE,OAAOb,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;IAC5EZ,GAAG,CAACW,IAAI,CAACE,IAAI,CAAC;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdf,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC5D;AACF,CAAC,CAAC;;AAEF;AACAjB,MAAM,CAACqB,GAAG,CAAC,eAAe,EAAE,OAAOjB,GAAG,EAAEC,GAAG,KAAK;EAC9C,IAAI;IACF,MAAMmB,KAAK,GAAG,MAAM1B,IAAI,CAACe,IAAI,CAAC,CAAC;IAC/BR,GAAG,CAACW,IAAI,CAACQ,KAAK,CAAC;EACjB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdf,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA8B,CAAC,CAAC;EAClE;AACF,CAAC,CAAC;;AAEF;AACAjB,MAAM,CAACyB,GAAG,CAAC,2BAA2B,EAAE,OAAOrB,GAAG,EAAEC,GAAG,KAAK;EAC1D,IAAI;IACF,MAAMa,IAAI,GAAG,MAAMpB,IAAI,CAAC4B,QAAQ,CAACtB,GAAG,CAACmB,MAAM,CAACI,EAAE,CAAC;IAC/C,IAAI,CAACT,IAAI,EAAE,OAAOb,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiB,CAAC,CAAC;IAErEC,IAAI,CAACH,MAAM,GAAG,UAAU;IACxBG,IAAI,CAACU,YAAY,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACzFb,IAAI,CAACc,OAAO,GAAG,gBAAgB,CAAC,CAAC;IACjCd,IAAI,CAACe,OAAO,GAAGhC,gBAAgB,CAACiB,IAAI,CAAChB,MAAM,CAAC;IAE5C,MAAMgB,IAAI,CAACC,IAAI,CAAC,CAAC;IACjBd,GAAG,CAACW,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAqC,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdf,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA8B,CAAC,CAAC;EAClE;AACF,CAAC,CAAC;;AAEF;AACAjB,MAAM,CAACyB,GAAG,CAAC,0BAA0B,EAAE,OAAOrB,GAAG,EAAEC,GAAG,KAAK;EACzD,IAAI;IACF,MAAM;MAAE6B;IAAO,CAAC,GAAG9B,GAAG,CAACO,IAAI;IAC3B,MAAMO,IAAI,GAAG,MAAMpB,IAAI,CAAC4B,QAAQ,CAACtB,GAAG,CAACmB,MAAM,CAACI,EAAE,CAAC;IAC/C,IAAI,CAACT,IAAI,EAAE,OAAOb,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiB,CAAC,CAAC;IAErEC,IAAI,CAACH,MAAM,GAAG,UAAU;IACxBG,IAAI,CAACgB,MAAM,GAAGA,MAAM,IAAI,oCAAoC;IAE5D,MAAMhB,IAAI,CAACC,IAAI,CAAC,CAAC;IACjBd,GAAG,CAACW,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAqC,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdf,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA8B,CAAC,CAAC;EAClE;AACF,CAAC,CAAC;AAEF,eAAejB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}